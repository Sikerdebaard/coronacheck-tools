# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '00 7 * * *'
    - cron: '00 18 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
# , macos-latest
# , windows-latest
        os: [ubuntu-latest]  

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }} ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install -r ./dev_requirements.txt
      shell: bash
    - name: Install OS specific deps
      run:   |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update && sudo apt install libzbar-dev
         elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install zbar
         elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install zbar
         else
              echo "$RUNNER_OS not supported"
              exit 1
         fi
      shell: bash
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --exclude ./venv --statistics
        # exit-zero treats all errors as warnings.
        flake8 . --count --exit-zero --max-complexity=10 --exclude ./venv --max-line-length=160 --statistics
      shell: bash
    - name: Test with pytest
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
            echo -n "${{ secrets.V2TESTQR }}" | base64 --decode > test/testdata/qrtest.png
            echo -n "${{ secrets.V2TESTQRVALID }}" | base64 --decode > test/testdata/qrtest2.png
            echo -n "${{ secrets.V2REVOKEDQR }}" | base64 --decode > test/testdata/qrtestrevoked.raw
        else
            echo -n "${{ secrets.V2TESTQR }}" | base64 --decode --ignore-garbage > test/testdata/qrtest.png
            echo -n "${{ secrets.V2TESTQRVALID }}" | base64 --decode --ignore-garbage > test/testdata/qrtest2.png
            echo -n "${{ secrets.V2REVOKEDQR }}" | base64 --decode --ignore-garbage > test/testdata/qrtestrevoked.raw
        fi
        
        #pytest -vv --showlocals # --full-trace
        
        # Retry on fail, MacOSX can be moody sometimes due to urrlib3
        (echo "===== PyTest Attempt: 1 ====" && pytest -vv --showlocals) || \
        (echo "===== PyTest Attempt: 2 ====" && pytest -vv --showlocals) || \
        (echo "===== PyTest Attempt: 3 ====" && pytest -vv --showlocals) || \
        (echo "==== PyTest Failed ====" && exit 1)
      shell: bash
